// globals
const async = require('async');
// const Busboy = require('busboy');
// const DB = require('./db');
const drive = require('./drive_api');
const formidable = require('formidable');
const fs = require('fs');
const mv = require('mv');
const path = require('path');
// const tinify = require('./tinify');

function emptyUploads() {
    let upload_dir = './uploads';
    for (file of fs.readdirSync('./uploads')) {
        fs.unlink(path.join(upload_dir, file), (error) => {
            if (error) throw error;
        });
        console.log('uploads empty');
    }
}
emptyUploads();

function validateTags(tags) {
    let error = null;
    if (tags.length === 0) {
        error = 'Error: Please add one or more tags.';
    }
    else {
        let split_tags = tags.split(',');
        for (let i = 0; i < split_tags.length; i++) {
            tag = split_tags[i].trim();
            if (tag.length < 2) {
                error = 'Error: Each tag should have at least 2 characters.'
                break;
            }
            else if (!/^\w|\w$/.test(tag)) {
                error = 'Error: Tags should begin or end only with alphabets, numbers or an underscore.' 
                break;
            }
            else if (/\s/.test(tag)) {
                error = 'Error: Tags cannot contain spaces.';
            }
        }
    }
    return error;
}

function validFile(filetype) {
    let file_types = [
        'image/jpeg',
        'image/png',
        'image/svg+xml',
        'image/gif'
    ];
    for (let i = 0; i < file_types.length; i++) {
        if (file_types[i] === filetype) {
            return true;
        }
    }
    return null;
}

function upload(request, response) {
    // const busboy = new Busboy({headers: request.headers});
    let form = new formidable.IncomingForm();
    let tags;
    let files = [];
    emptyUploads();
    form.multiples = true;
    form.parse(request);
    
    form.on('field', function (name, field) {
        tags = field;
    });

    form.on('file', function (name, file) {
        let file_obj = {
            buffer: fs.readFileSync(file.path),
            name: file.name,
            size: file.size,
            type: file.type
        }
        files.push(file_obj);
        // let write_stream = fs.createWriteStream('./uploads/' + file.name);
        // write_stream.write(file_obj.file_buffer);
    });

    form.on('end', function() {
       uploadProcessor(tags, files, response);
    });

    // request.pipe(busboy);
}

function uploadProcessor(tags, files, response) {
    let tag_error = validateTags(tags);
    if (tag_error) {
        response.writeHead(500, {'Content-Type': 'text/plain'});
        response.end(JSON.stringify({ error: error }));
    }
    else {
        let file_error = [];
        async.series([
            function validityCheck(callback) {
                let valid_files = []
                for(file of files) {
                    if (validFile(file.type)) {
                        valid_files.push(file);
                    }
                    else {
                        file_error.push({
                            file: file.name,
                            error: 0
                        })
                    }
                }
                files = valid_files;
                callback(null);
            },
            function duplicationCheck(callback) {
                // future implementation
                callback(null);
            },
            function writeToDisk(callback) {
                async.each(files, function(file, callback){
                    try {
                        // let file = file.file;
                        let oldpath = file.path;
                        let newpath = __dirname + '/uploads/' + file.name;
                        mv(oldpath, newpath, function (error) {
                            if (error) {
                                file_error.push({
                                    file: file.name,
                                    error: 1
                                })
                            }
                            // updateDB(tags, file.name);
                            callback(); // each         
                        });
                    }
                    catch (e) {
                        callback(e); //each
                    }
                },function onError(error) {
                    if (error) {
                        console.log(error);
                        callback(error); // series
                    }
                    else {
                        callback(null); // series
                    }
                });
            },
            function compressFiles(callback) {
                // async.waterfall([
                //     function filterUnderSizedFiles(callback) {
                //         let filtered_files = [];
                //         for (file of files) {
                //             let file_size = fs.statSync(`./uploads/${file.name}`).size;
                //             console.log(file_size);
                //             if (file_size / 1024 >= 200) {
                //                 filtered_files.push(file);
                //             }
                //         }
                //         callback(null, filtered_files); // waterfall - self
                //     }, function sendForCompression(files, callback) {
                //         for (file of files) {
                //             let compress = tinify.compress(file.name);
                //             if (!compress) {
                //                 file_error.push({
                //                     name: file.name,
                //                     message: compress
                //                 });
                //             }
                //         }
                //         callback(null); // waterfall -self
                //     }
                // ], function onError(error) {
                //     if (error) {
                //         console.log(error);
                //         callback(error); // series (parent)
                //     }
                //     else {
                //         console.log('All files compress.')
                //         callback(null) // series (parent)
                //     }
                // });
                callback(null);
            },
            function cleanUp(callback) {
                // cleanup code
                callback();
            }
        ], function onError(error) {
            if (error) {
                response.writeHead(500, {'Content-Type': 'text/plain'});
                response.end(error.toString());
            }
            else if (file_error.length > 0) {
                response.writeHead(500, {'Content-Type': 'text/plain'});
                response.end(JSON.stringify(file_error));
            }
            else {
                response.writeHead(200, {'Content-Type': 'text/plain'});
                response.end('Uploaded.');
            }
        });
    }
}

module.exports = { upload }